/**
 * Created by 동준 on 2014-11-20.
 */
(function(window, document, undefined) {
    var johayoCalendar = angular.module('johayo.calendar', []);

    johayoCalendar.factory('$lunar',[function(){
        var startDate = '18810130';
        // 음력> 월별 소월/대월/윤월(소)/윤월(대) = 1/2/3/4
        // LunarMonthTable[0][12]가 0이면 윤달 없음
        var LunarMonthTable = [
            '1212122322121', '1212121221220', '1121121222120', '2112132122122', '2112112121220' // 1881~1890
            , '2121211212120', '2212321121212', '2122121121210', '2122121212120', '1232122121212'
            , '1212121221220', '1121123221222', '1121121212220', '1212112121220', '2121231212121' // 1891~1900
            , '2221211212120', '1221212121210', '2123221212121', '2121212212120', '1211212232212'
            , '1211212122210', '2121121212220', '1212132112212', '2212112112210', '2212211212120' // 1901
            , '1221412121212', '1212122121210', '2112212122120', '1231212122212', '1211212122210'
            , '2121123122122', '2121121122120', '2212112112120', '2212231212112', '2122121212120' // 1911
            , '1212122121210', '2132122122121', '2112121222120', '1211212322122', '1211211221220'
            , '2121121121220', '2122132112122', '1221212121120', '2121221212110', '2122321221212' // 1921
            , '1121212212210', '2112121221220', '1231211221222', '1211211212220', '1221123121221'
            , '2221121121210', '2221212112120', '1221241212112', '1212212212120', '1121212212210' // 1931
            , '2114121212221', '2112112122210', '2211211412212', '2211211212120', '2212121121210'
            , '2212214112121', '2122122121120', '1212122122120', '1121412122122', '1121121222120' // 1941
            , '2112112122120', '2231211212122', '2121211212120', '2212121321212', '2122121121210'
            , '2122121212120', '1212142121212', '1211221221220', '1121121221220', '2114112121222' // 1951
            , '1212112121220', '2121211232122', '1221211212120', '1221212121210', '2121223212121'
            , '2121212212120', '1211212212210', '2121321212221', '2121121212220', '1212112112210' // 1961
            , '2223211211221', '2212211212120', '1221212321212', '1212122121210', '2112212122120'
            , '1211232122212', '1211212122210', '2121121122210', '2212312112212', '2212112112120' // 1971
            , '2212121232112', '2122121212110', '2212122121210', '2112124122121', '2112121221220'
            , '1211211221220', '2121321122122', '2121121121220', '2122112112322', '1221212112120' // 1981
            , '1221221212110', '2122123221212', '1121212212210', '2112121221220', '1211231212222'
            , '1211211212220', '1221121121220', '1223212112121', '2221212112120', '1221221232112' // 1991
            , '1212212122120', '1121212212210', '2112132212221', '2112112122210', '2211211212210'
            , '2221321121212', '2212121121210', '2212212112120', '1232212121212', '1212122122110' // 2001
            , '2121212322122', '1121121222120', '2112112122120', '2211231212122', '2121211212120'
            , '2122121121210', '2124212112121', '2122121212120', '1212121223212', '1211212221220' // 2011
            , '1121121221220', '2112132121222', '1212112121220', '2121211212120', '2122321121212'
            , '1221212121210', '2121221212120', '1232121221212', '1211212212210', '2121123212221' // 2021
            , '2121121212220', '1212112112220', '1221231211221', '2212211211220', '1212212121210'
            , '2123212212121', '2112122122120', '1211212322212', '1211212122210', '2121121122120' // 2031
            , '2212114112122', '2212112112120', '2212121211210', '2212232121211', '2122122121210'
            , '2112122122120', '1231212122212', '1211211221220', '2121121321222', '2121121121220' // 2041
            , '2122112112120', '2122141211212', '1221221212110', '2121221221210', '2114121221221'
            , '2112121212220', '1211211232222', '1211211212220', '1221121121220', '1221214112121' // 2051
            , '2221212112120', '1221212211210', '2121421212211', '2121212212210', '2112112212220'
            , '1213211212221', '2211211212210', '2212121321212', '2212121121210', '2212212112120' // 2061
            , '1212232121212', '1212122121210', '2121212122120', '2112312122212', '2112112122120'
            , '2211211232122', '2121211212120', '2122121121210', '2122123212121', '2121221212120' // 2071
            , '1212121221210', '2121321222121', '2121121221220', '1212112121220', '2123211212122'
            , '2121211211220', '1222121321212', '1221212121210', '2121221212120', '1211241221212' // 2081
            , '1211212212210', '2121121212220', '1212312112222', '1212112112210', '2221211231221'
            , '2212121211220', '1212212121210', '2121214212121', '2112122122120', '1211212142210' // 2091~2100
            , '2121321212212', '2121121122120', '2212112112210', '2223211211212', '2212121211210'];
        // 음력> 연도의 일수
        var LunarYearDays = [
            384, 355, 354, 384, 354, 354, 384, 354, 355, 384 // 1881~1890
            , 355, 384, 354, 354, 383, 355, 354, 384, 355, 384
            , 354, 355, 383, 354, 355, 384, 354, 355, 384, 354 // 1901~1910
            , 384, 354, 354, 384, 355, 354, 384, 355, 384, 354
            , 354, 384, 354, 354, 385, 354, 355, 384, 354, 383
            , 354, 355, 384, 355, 354, 384, 354, 384, 354, 354
            , 384, 355, 355, 384, 354, 354, 384, 354, 384, 354
            , 355, 384, 355, 354, 384, 354, 384, 354, 354, 384 // 1951
            , 355, 354, 384, 355, 353, 384, 355, 384, 354, 355
            , 384, 354, 354, 384, 354, 384, 354, 355, 384, 355
            , 354, 384, 354, 384, 354, 354, 385, 354, 355, 384
            , 354, 354, 383, 355, 384, 355, 354, 384, 354, 354
            , 384, 354, 355, 384, 354, 385, 354, 354, 384, 354 // 2001
            , 354, 384, 355, 384, 355, 354, 384, 354, 354, 384
            , 354, 355, 384, 354, 384, 355, 354, 383, 355, 354
            , 384, 355, 384, 354, 354, 384, 354, 354, 384, 355
            , 355, 384, 354, 384, 354, 354, 384, 354, 355, 384
            , 355, 384, 354, 354, 383, 355, 354, 384, 355, 355 // 2051
            , 383, 354, 384, 354, 355, 384, 354, 355, 384, 354
            , 384, 354, 354, 384, 355, 354, 384, 355, 354, 384
            , 354, 384, 354, 355, 384, 354, 355, 384, 353, 384
            , 355, 354, 384, 355, 354, 384, 354, 354, 384, 354 // 2091~2100
        ];

        /* 두날짜 일수 구하기 */
        function getLunarDayFromYear (date){
            var strSDT = new Date(startDate.substr(0,4), startDate.substr(4,2), startDate.substr(6,2));
            var strEDT = new Date(date.substr(0,4), date.substr(4,2), date.substr(6,2));

            return (strEDT.getTime()-strSDT.getTime())/(1000*60*60*24) + 1;
        }

        var service = {
            changeLunaDate : function(date){
                /* 음력 날짜 */
                var lunarDay = 0;

                /**
                 *  step1
                 *  기준 날짜와 입력받은 날짜의 모든 일수를 구해서 더한다..
                 */
                lunarDay = lunarDay + getLunarDayFromYear(data);

                /**
                 *  step2
                 *  1의 일수에서  기준일의 음력연도부터 2100년까지의 일수를 빼면서 음력 년도를 증가한다.
                 *  (단, 해당 연도보다 1의일수가 적으면 중단)
                 */
                var lunarYear = startDate.substr(0,4) - 1;
                for(var i=0;i<LunarYearDays.length;i++){
                    lunarYear++;

                    if (LunarYearDays[i] >= lunarDay){
                        var MonthTable = LunarMonthTable[i];
                        break;
                    }

                    lunarDay = lunarDay - LunarYearDays[i]*1;
                }

                /**
                 * step3
                 *
                 * 2의 남은 일수에서 2의 음력 년도의 월수만큼 씩 감하여 음력 월을 증가한다.
                 * 음력 소월/대월일 경우 음력 달을 증가한다.
                 * 음력 소원/윤달(소월)인경우 해당 음력 달의 일수가 29이므로 2의 남은 일수에서 빼준다.
                 * 음력 대월/윤달(대월)인경우 해달 음력 달의 일수가 30이므로 2의 남은 일수에서 빼준다.
                 * 이번 계산에서 남은 마지막 lunarDat가 음력 일짜이다.
                 */
                var lunarMonth = 0;
                for(var j=0;j<12;j++){
                    var monDays = 0;
                    var checkMon = MonthTable.substr(j, 1);
                    if(checkMon == '1' || checkMon == '2'){
                        lunarMonth++;
                    }

                    if(checkMon == '1' || checkMon == '3' )
                    {
                        monDays = 29;
                    }
                    else if(checkMon ==  '2' || checkMon == '4' ){
                        monDays = 30;
                    }

                    if(monDays >= lunarDay){
                        break;
                    }

                    lunarDay = lunarDay - monDays;
                }

                if(lunarMonth < 10){
                    lunarMonth = '0' + lunarMonth.toString()
                }

                if(lunarDay < 10){
                    lunarDay = '0' + lunarDay.toString()
                }

                return lunarYear.toString() + lunarMonth.toString() + lunarDay.toString();
            }
        };

        return service;
    }])
        .factory('$calendar',[function(){
            /* 음력 기념일 */
            var lunarAnniversary =
                [
                    {date : 0101, name : '설날'},
                    {date : 0408, name : '석가탄신일'},
                    {date : 0815, name : '추석'}
                ];
            /* 양력기념일 */
            var anniversary =
                [
                    {date : 0101, name : '신정'},
                    {date : 0301, name : '삼일절'},
                    {date : 0505, name : '어린이날'},
                    {date : 0506, name : '삼일절'},
                    {date : 0606, name : '현충일'},
                    {date : 0606, name : '광복절'},
                    {date : 1003, name : '개천절'},
                    {date : 1009, name : '한글의날'},
                    {date : 1225, name : '성탄절'}
                ];

            var service = {
                getDate : function(date){
                    var today = new Date();

                    if(!date){
                        var nMonth = today.getMonth() + 1;
                        var nDay = today.getDate();
                        if(String(nMonth).length == 1)
                            nMonth = "0" + nMonth;
                        if(String(nDay).length == 1)
                            nDay = "0" + nDay;
                        date = String(today.getFullYear()) + String(nMonth) + String(nDay);
                    }

                    var year = date.substr(0,4);
                    var month = date.substr(4,2);

                    var date = new Date(year, month*1-1, 1);
                    var firstDayName = date.getDay();

                    var previousStartDay = (new Date(year,month*1-1,1 - (firstDayName+1))).getDate();
                    var nextStartDay = 1;

                    var lastDayList=[31,28,31,30,31,30,31,31,30,31,30,31];
                    /*현재 연도가 윤년(4년 주기이고 100년 주기는 제외합니다.
                     또는 400년 주기)일경우 2월에 마지막 날짜는 29가 되어야 합니다.*/
                    if(year%4 == 0 && year % 100 !=0 || year%400 == 0) lastDayList[1]=29;

                    var lastDate=lastDayList[month*1-1];
                    var row = Math.ceil((firstDayName+lastDate)/7);

                    var resultCalendar = new Array();
                    for(var i=0;i<row;i++){
                        resultCalendar[i] = new Array();
                        for(var j=0;j<7;j++){
                            resultCalendar[i][j] = {};
                            if(j < firstDayName){
                                resultCalendar[i][j].day = previousStartDay++
                            }else if (j > lastDate) {
                                resultCalendar[i][j].day = nextStartDay++
                            }else{
                                resultCalendar[i][j].day = j+1;
                            }
                        }
                    }
                }
            };

            return service;
        }])
});